// <auto-generated />
using System;
using Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Data.DataAccess.Migrations
{
    [DbContext(typeof(BillingDbContext))]
    partial class BillingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Common.EntityModels.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Adresse")
                        .HasColumnType("text");

                    b.Property<string>("CP")
                        .HasColumnType("text");

                    b.Property<int>("Civil")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .HasColumnType("text");

                    b.Property<string>("Pays")
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .HasColumnType("text");

                    b.Property<string>("Societe")
                        .HasColumnType("text");

                    b.Property<int>("Statut")
                        .HasColumnType("integer");

                    b.Property<string>("Tel")
                        .HasColumnType("text");

                    b.Property<string>("Ville")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Common.EntityModels.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateP")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModeR")
                        .HasColumnType("integer");

                    b.Property<int>("Num")
                        .HasColumnType("integer");

                    b.Property<string>("Objet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Total")
                        .HasColumnType("double precision");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Document");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Document");
                });

            modelBuilder.Entity("Common.EntityModels.Wording", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<long>("DocId")
                        .HasColumnType("bigint");

                    b.Property<float>("PrixU")
                        .HasColumnType("real");

                    b.Property<float>("Quantite")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DocId");

                    b.ToTable("Wordings");
                });

            modelBuilder.Entity("Common.EntityModels.Bill", b =>
                {
                    b.HasBaseType("Common.EntityModels.Document");

                    b.HasDiscriminator().HasValue("Bill");
                });

            modelBuilder.Entity("Common.EntityModels.Estimate", b =>
                {
                    b.HasBaseType("Common.EntityModels.Document");

                    b.HasDiscriminator().HasValue("Estimate");
                });

            modelBuilder.Entity("Common.EntityModels.Document", b =>
                {
                    b.HasOne("Common.EntityModels.Client", "Client")
                        .WithMany("Documents")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Common.EntityModels.Wording", b =>
                {
                    b.HasOne("Common.EntityModels.Document", "Doc")
                        .WithMany("LibelleList")
                        .HasForeignKey("DocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doc");
                });

            modelBuilder.Entity("Common.EntityModels.Client", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Common.EntityModels.Document", b =>
                {
                    b.Navigation("LibelleList");
                });
#pragma warning restore 612, 618
        }
    }
}
